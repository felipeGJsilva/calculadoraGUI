import tkinter as tk
from tkinter import ttk

class Calculadora:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculadora")
        self.root.configure(bg="black")  # Fundo preto
        self.resultado = None
        self.operacao_atual = ""
        self.novo_numero = True
        self.erro = False

        # Estilo personalizado para os botões
        style = ttk.Style()
        style.configure("TButton", font=("Arial", 18), padding=10, relief="flat", background="black", foreground="blue")
        style.map("TButton", foreground=[('active', 'blue')], background=[('active', 'gray')])

        # Display com letras azuis e fundo preto
        self.display = tk.Entry(root, font=("Arial", 24), bd=10, insertwidth=4, width=14, borderwidth=4, 
                                justify="right", fg="blue", bg="black")
        self.display.grid(row=0, column=0, columnspan=4)

        self.criar_botoes()

    def criar_botoes(self):
        botoes = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2),
            ('0', 4, 1), ('C', 4, 0), ('=', 4, 2),
            ('+', 1, 3), ('-', 2, 3), ('*', 3, 3), ('/', 4, 3)
        ]

        for (texto, linha, coluna) in botoes:
            comando = self.limpar if texto == 'C' else self.calcular if texto == '=' else lambda t=texto: self.adicionar(t)

            # Botões com fundo preto e arredondados
            button = ttk.Button(self.root, text=texto, style="TButton", command=comando)
            button.grid(row=linha, column=coluna, sticky="nsew", padx=5, pady=5)
            button.configure(width=5, padding=10)  # Aumentando o tamanho do botão

        # Tornando as colunas e linhas expansíveis
        for i in range(5):
            self.root.grid_columnconfigure(i, weight=1)
            self.root.grid_rowconfigure(i, weight=1)

    def adicionar(self, valor):
        if self.erro:
            self.limpar()

        if valor in '+-*/':
            if self.resultado is not None and not self.novo_numero:
                self.calcular()
            else:
                try:
                    self.resultado = float(self.display.get())  # Verificação segura
                except ValueError:
                    self.resultado = 0  # Valor padrão se a conversão falhar
            self.operacao_atual = valor
            self.novo_numero = True
        else:
            if self.novo_numero:
                self.display.delete(0, tk.END)
                self.novo_numero = False
            self.display.insert(tk.END, valor)

    def calcular(self):
        try:
            if self.operacao_atual and not self.novo_numero:
                segundo_numero = float(self.display.get())
                if self.operacao_atual == '+':
                    self.resultado += segundo_numero
                elif self.operacao_atual == '-':
                    self.resultado -= segundo_numero
                elif self.operacao_atual == '*':
                    self.resultado *= segundo_numero
                elif self.operacao_atual == '/':
                    if segundo_numero == 0:
                        raise ZeroDivisionError
                    self.resultado /= segundo_numero

                self.display.delete(0, tk.END)
                self.display.insert(tk.END, str(self.resultado))
                self.novo_numero = True
                self.operacao_atual = ''
        except ZeroDivisionError:
            self.display.delete(0, tk.END)
            self.display.insert(tk.END, "Erro: Divisão por zero")
            self.erro = True
        except ValueError:
            self.display.delete(0, tk.END)
            self.display.insert(tk.END, "Erro")
            self.erro = True

    def limpar(self):
        self.display.delete(0, tk.END)
        self.operacao_atual = ""
        self.resultado = None
        self.novo_numero = True
        self.erro = False

# Inicializando a calculadora
root = tk.Tk()
calc = Calculadora(root)
root.mainloop()
